# Bash functions sourced .bashrc

# There could be some aliases and env variables declared here in order to keep them closer
# to the code using them


# Generic Utility functions
function spdr {
  source activate base; spyder &
}

function enabletouchpad {
  touchid=$(xinput list | grep 'Touchpad' | grep -P -o 'id=[0-9]+' | cut -d '=' -f 2)
  xinput set-prop $touchid "Device Enabled" 1
}

function enableconda {
  export PATH="$CONDA_BIN_PATH:$PATH"
}

# SSH Agent configuration
# File to store the SSH Agent environment
SSH_ENV=$HOME/.ssh/environment
# start the ssh-agent
function start_agent {
    echo "Initializing new SSH agent..."
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo "Agent started...."
    
    # Source environment, which sets SSH_AGENT_PID in the current environment
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    
    # Adding keys to ssh agent
    find ~/.ssh -type f -name *id_rsa -exec /usr/bin/ssh-add {} \;
}
# Do not start SSH Agent if SSH agent is still running as the same PID 
# as the one stored in the environment
if [ -f "${SSH_ENV}" ]; then
     . "${SSH_ENV}" > /dev/null
         ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
            start_agent;
        }
else
    start_agent;
fi

# Window Manager funtions
function infodesk {
  deskdim=$(xdotool getdisplaygeometry)
  echo "Screen Dimensions: ${deskdim}"
  echo "Window List:"
  wmctrl -lG
  echo "Window Dimensions:"
  wmctrl -l | cut -d ' ' -f 1 | xargs -t -n1 xdotool getwindowgeometry
}

# wmctrl -e flag takes option in format Gravity, X,Y (top left corner) , Width, Height of the window
function devdesk {
  display_count=$(xrandr --listactivemonitors | tail -n +2 | wc -l)
  display_width=$(xrandr --listactivemonitors | tail -n +2 | cut -d ' ' -f 4 | cut -d '/' -f 1)
  display_height=$(xrandr --listactivemonitors | tail -n +2 | cut -d ' ' -f 4 | cut -d 'x' -f 2 | cut -d '/' -f 1)
  top_margin=35
  bottom_margin=90 
  padding=10
  window_width=$[$[display_width-padding*4]/2]
  left_window_height=$[display_height-top_margin-bottom_margin]
  right_window_height=$[$[left_window_height-padding*3]/2]
  left_anchor_x=$padding
  left_anchor_y=$top_margin
  right_anchor_x=$[left_anchor_x+window_width+padding*2]
  right_top_anchor_y=$top_margin
  right_bottom_anchor_y=$[right_top_anchor_y+right_window_height+45]
  if [[ $display_count -eq 1 ]]; then
    # id display is 1 then mostly home laptop
    # For COVID, got monotor home, but dual monitor not possible; hence 1 monitor
    # possible for work laptop profile too
    {%@@ if profile == "worklaptop" @@%}
    wmctrl -r 'Mailspring' -t 1
    wmctrl -r 'Slack' -t 1
    wmctrl -r 'MineTime' -t 1
    wmctrl -r 'Mailspring' -e "0,$left_anchor_x,$left_anchor_y,$window_width,$left_window_height"
    wmctrl -r 'Slack' -e "0,$right_anchor_x,$right_top_anchor_y,$window_width,$right_window_height"
    wmctrl -r 'MineTime' -e "0,$right_anchor_x,$right_bottom_anchor_y,$window_width,$right_window_height"
    {%@@ endif @@%}
    wmctrl -r '/Workspace/' -t 0
    wmctrl -r 'Visual Studio Code' -t 0
    wmctrl -r 'Mozilla Firefox' -t 0
    wmctrl -r 'Terminal' -t 0
    wmctrl -r '/Workspace/' -e "0,$left_anchor_x,$left_anchor_y,$window_width,$left_window_height"
    wmctrl -r 'Visual Studio Code' -e "0,$left_anchor_x,$left_anchor_y,$window_width,$left_window_height"
    wmctrl -r 'Mozilla Firefox' -e "0,$right_anchor_x,$right_top_anchor_y,$window_width,$right_window_height"
    wmctrl -r 'Terminal' -e "0,$right_anchor_x,$right_bottom_anchor_y,$window_width,$right_window_height"
  elif [[ $display_count -eq 2 ]]; then
    wmctrl -r '/Workspace/' -t 0
    wmctrl -r 'Visual Studio Code' -t 0
    wmctrl -r 'Mozilla Firefox' -t 0
    wmctrl -r 'Terminal' -t 0
    wmctrl -r 'Mailspring' -t 0
    wmctrl -r 'Slack' -t 0
    wmctrl -r 'MineTime' -t 0
    # TODO: Handle Dual monitor setup using screen size calculations
    wmctrl -r '/Workspace/' -e '0,2570,30,1850,2034'
    wmctrl -r 'Visual Studio Code' -e '0,2570,30,1850,2034'
    wmctrl -r 'Mozilla Firefox' -e '0,4430,30,1960,1290'
    wmctrl -r 'Terminal' -e '0,4430,1360,1960,707'
    wmctrl -r 'Mailspring' -e '0,10,305,1350,1310'
    wmctrl -r 'Slack' -e '0,1365,305,1180,590'
    wmctrl -r 'MineTime' -e '0,1365,930,1180,685'
  fi  
}

function ruindesk {
  wmctrl -r '/Workspace/' -t 0 -e '0,10,650,230,350'
  wmctrl -r 'Visual Studio Code' -t 0 -e '0,300,650,230,350'
  wmctrl -r 'Mozilla Firefox' -t 0 -e '0,800,650,230,350'
  wmctrl -r 'Terminal' -t 0 -e '0,1300,650,230,350'
  wmctrl -r 'Mailspring' -t 0 -e '0,1300,50,230,350'
  wmctrl -r 'Slack' -t 0 -e '0,800,50,230,350'
  wmctrl -r 'MineTime' -t 0 -e '0,10,50,230,350'
}

function rd {
  ruindesk
  devdesk
}


# git functions
# git refresh remote branch list
function grrbl {
  git remote update origin --prune
}


# Driverless AI functions
function builddai {
  cd ~/Workspace/Office/Codebases/h2oai
  . env/bin/activate
  chmod -R a+w /home/hemen/Workspace/Office/Codebases/h2oai/env/lib/python3.6/site-packages
  make fullinstall
}

function rundai {
  cd ~/Workspace/Office/Codebases/h2oai
  . env/bin/activate
  export DRIVERLESS_AI_MLI_STRICT_VERSION_CHECK=false
  DRIVERLESS_AI_LIST_FILES_WITHOUT_EXTENSIONS=true CUDA_VISIBLE_DEVICES=  python -m h2oai --with_all
}

function killdai {
  pkill --signal 9 -f -u $USER 'procsy|h2o.jar|vis-data-server.jar|h2oai-DriverlessAI|h2oai-worker:stats'
}


# Docker functions

# Container
function dcl {
  docker container ls -a
}
function dcrm {
  docker container rm $(docker container ls -aq)
}
function dcs {
  count=$(docker container ls | grep -c $1)
  [[ $count -eq 0 ]] && { echo "No docker containers match pattern"; return 1; }
  [[ $count -gt 1 ]] && { echo "More than 1 docker containers match pattern"; return 1; }
  c_label=$(docker container ls | grep "${1}" | cut -d " " -f 1)
  [[ -z "${c_label}" ]] && { echo "Container pattern matching failed"; return 1; }
  docker container stop "${c_label}"
}

# Image
function dil {
  docker image ls $1 
}

# Volume
function dvl {
  docker volume ls
}
function dvi {
  count=$(docker volume ls | grep -c $1)
  [[ $count -eq 0 ]] && { echo "No docker volumes match pattern"; return 1; }
  [[ $count -gt 1 ]] && { echo "More than 1 docker volumes match pattern"; return 1; }
  vol_label=$(docker volume ls | grep "${1}" | cut -d " " -f 16)
  [[ -z "${vol_label}" ]] && { echo "Volumes pattern matching failed"; return 1; }
  docker volume inspect "${vol_label}"
}
function dvpr {
  docker volume prune
}
 
{%@@ if profile == "worklaptop" @@%}
# shellcheck source=/home/hemen/Workspace/Office/Customers/PwC/audit-api/tools/bash_functions_pwc
source "${HOME}/Workspace/Office/Customers/PwC/audit-api/tools/bash_functions_pwc"
{%@@ endif @@%}
